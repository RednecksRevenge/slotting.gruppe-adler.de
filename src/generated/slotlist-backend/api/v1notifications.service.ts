/**
 * slotlist.info API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta32
 * Contact: nick@slotlist.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GetNotificationListResponse } from '../model/getNotificationListResponse';
import { GetUnseenNotificationCountResposne } from '../model/getUnseenNotificationCountResposne';
import { InternalServerError } from '../model/internalServerError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1notificationsService {

    protected basePath = 'https://api.slotlist.info';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns a list of notifications for the user
     * Returns a list of notifications for the user, only including unseen ones by default. Since retrieving a notification will mark it as seen immediately, no pagination is available unless the &#x60;includeUnseen&#x60; flag has been set. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param limit Limit for number of notifications to retrieve, defaults to 25 (used for pagination in combination with offset). Only effective if &#x60;includeSeen&#x60; has been set to &#x60;true&#x60;
     * @param offset Number of notifications to skip before retrieving new ones from database, defaults to 0 (used for pagination in combination with limit). Only effective if &#x60;includeSeen&#x60; has been set to &#x60;true&#x60;
     * @param includeSeen Toggles whether already seen notifications should also be included in the retrieved list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1Notifications(authorization: string, limit?: number, offset?: number, includeSeen?: boolean, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationListResponse>;
    public getV1Notifications(authorization: string, limit?: number, offset?: number, includeSeen?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationListResponse>>;
    public getV1Notifications(authorization: string, limit?: number, offset?: number, includeSeen?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationListResponse>>;
    public getV1Notifications(authorization: string, limit?: number, offset?: number, includeSeen?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getV1Notifications.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (includeSeen !== undefined) {
            queryParameters = queryParameters.set('includeSeen', <any>includeSeen);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationListResponse>(`${this.basePath}/v1/notifications`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the number of unseen notifications for the user
     * Returns the number of unseen notifications for the user. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1NotificationsUnseen(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GetUnseenNotificationCountResposne>;
    public getV1NotificationsUnseen(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetUnseenNotificationCountResposne>>;
    public getV1NotificationsUnseen(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetUnseenNotificationCountResposne>>;
    public getV1NotificationsUnseen(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getV1NotificationsUnseen.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetUnseenNotificationCountResposne>(`${this.basePath}/v1/notifications/unseen`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
