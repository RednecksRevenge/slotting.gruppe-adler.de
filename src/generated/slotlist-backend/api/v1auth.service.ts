/**
 * slotlist.info API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta32
 * Contact: nick@slotlist.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DeleteAccountResponse } from '../model/deleteAccountResponse';
import { GetAccountDetailsResponse } from '../model/getAccountDetailsResponse';
import { GetSteamLoginRedirectURLResponse } from '../model/getSteamLoginRedirectURLResponse';
import { InternalServerError } from '../model/internalServerError';
import { Model45 } from '../model/model45';
import { Model46 } from '../model/model46';
import { Model47 } from '../model/model47';
import { Model6 } from '../model/model6';
import { Model78 } from '../model/model78';
import { PatchAccountDetailsResponse } from '../model/patchAccountDetailsResponse';
import { RefreshJWTResponse } from '../model/refreshJWTResponse';
import { VerifySteamLogin } from '../model/verifySteamLogin';
import { VerifySteamLoginResponse } from '../model/verifySteamLoginResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1authService {

    protected basePath = 'https://api.slotlist.info';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns the user&#39;s account details
     * Returns the user&#39;s account information, providing an overview over the currently logged in user as well as modifications available. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1AuthAccount(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GetAccountDetailsResponse>;
    public getV1AuthAccount(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAccountDetailsResponse>>;
    public getV1AuthAccount(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAccountDetailsResponse>>;
    public getV1AuthAccount(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getV1AuthAccount.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAccountDetailsResponse>(`${this.basePath}/v1/auth/account`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the redirect URL for Steam OpenID signin
     * SSO callback returns to frontend, backend later verifies claims via POST to &#x60;/v1/auth/steam&#x60;. No authentication is required to access this endpoint
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1AuthSteam(observe?: 'body', reportProgress?: boolean): Observable<GetSteamLoginRedirectURLResponse>;
    public getV1AuthSteam(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSteamLoginRedirectURLResponse>>;
    public getV1AuthSteam(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSteamLoginRedirectURLResponse>>;
    public getV1AuthSteam(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetSteamLoginRedirectURLResponse>(`${this.basePath}/v1/auth/steam`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies the user&#39;s mutable account details
     * Allows for modification of the user&#39;s mutable account information - users can update their nickname. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchV1AuthAccount(authorization: string, body?: Model78, observe?: 'body', reportProgress?: boolean): Observable<PatchAccountDetailsResponse>;
    public patchV1AuthAccount(authorization: string, body?: Model78, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PatchAccountDetailsResponse>>;
    public patchV1AuthAccount(authorization: string, body?: Model78, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PatchAccountDetailsResponse>>;
    public patchV1AuthAccount(authorization: string, body?: Model78, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling patchV1AuthAccount.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<PatchAccountDetailsResponse>(`${this.basePath}/v1/auth/account`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the user&#39;s account and all information associated, including mission data
     * Deletes the user&#39;s account and all information associated, including mission data. This operation is final and requires \&quot;verification\&quot; by  confirm the user&#39;s current nickname. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV1AuthAccountDelete(authorization: string, body?: Model46, observe?: 'body', reportProgress?: boolean): Observable<DeleteAccountResponse>;
    public postV1AuthAccountDelete(authorization: string, body?: Model46, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteAccountResponse>>;
    public postV1AuthAccountDelete(authorization: string, body?: Model46, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteAccountResponse>>;
    public postV1AuthAccountDelete(authorization: string, body?: Model46, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling postV1AuthAccountDelete.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<DeleteAccountResponse>(`${this.basePath}/v1/auth/account/delete`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Refreshes the user&#39;s JWT
     * Refreshes the user&#39;s JWT by generating a new one. The updated JWT includes the latest permissions and nickname changes - this endpoint should thus be used after every modifying change (e.g. nickname change, community association, permission grants, etc.). Regular user authentication is required to access this endpoint
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV1AuthRefresh(observe?: 'body', reportProgress?: boolean): Observable<RefreshJWTResponse>;
    public postV1AuthRefresh(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RefreshJWTResponse>>;
    public postV1AuthRefresh(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RefreshJWTResponse>>;
    public postV1AuthRefresh(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<RefreshJWTResponse>(`${this.basePath}/v1/auth/refresh`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verifies the provided Steam OpenID claims and returns a JWT on success
     * After the verification call to Steam&#39;s OpenID provider succeedes, the current user database will be checked for the SteamID. If the user does not exist, their public Steam information will be retrieved and a new entry created. A JWT with the user&#39;s nickname as well as permissions is then returned. No authentication is required to access this endpoint
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV1AuthSteam(body?: VerifySteamLogin, observe?: 'body', reportProgress?: boolean): Observable<VerifySteamLoginResponse>;
    public postV1AuthSteam(body?: VerifySteamLogin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VerifySteamLoginResponse>>;
    public postV1AuthSteam(body?: VerifySteamLogin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VerifySteamLoginResponse>>;
    public postV1AuthSteam(body?: VerifySteamLogin, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<VerifySteamLoginResponse>(`${this.basePath}/v1/auth/steam`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
