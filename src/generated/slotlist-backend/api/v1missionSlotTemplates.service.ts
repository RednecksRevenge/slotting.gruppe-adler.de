/**
 * slotlist.info API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta32
 * Contact: nick@slotlist.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CreateMissionSlotTemplateResponse } from '../model/createMissionSlotTemplateResponse';
import { DeleteAccountResponse } from '../model/deleteAccountResponse';
import { GetMissionSlotTemplateDetailsResponse } from '../model/getMissionSlotTemplateDetailsResponse';
import { GetMissionSlotTemplateListResponse } from '../model/getMissionSlotTemplateListResponse';
import { InternalServerError } from '../model/internalServerError';
import { Model40 } from '../model/model40';
import { Model41 } from '../model/model41';
import { Model84 } from '../model/model84';
import { Model9 } from '../model/model9';
import { UpdateMissionSlotTemplateResponse } from '../model/updateMissionSlotTemplateResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class V1missionSlotTemplatesService {

    protected basePath = 'https://api.slotlist.info';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Deletes an existing mission slot template
     * Deletes an existing mission slot template. Regular user authentication with appropriate permissions is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param slotTemplateUid UID of the mission slot template to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteAccountResponse>;
    public deleteV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteAccountResponse>>;
    public deleteV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteAccountResponse>>;
    public deleteV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteV1MissionslottemplatesSlottemplateuid.');
        }
        if (slotTemplateUid === null || slotTemplateUid === undefined) {
            throw new Error('Required parameter slotTemplateUid was null or undefined when calling deleteV1MissionslottemplatesSlottemplateuid.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteAccountResponse>(`${this.basePath}/v1/missionSlotTemplates/${encodeURIComponent(String(slotTemplateUid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of all available mission slot templates
     * Returns a paginated list of all mission slot templates available to the user, including default templates. Up to 100 templates can be requested at once, pagination has to be used to retrieve the rest. No authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, optional
     * @param limit Limit for number of mission slot templates to retrieve, defaults to 25 (used for pagination in combination with offset)
     * @param offset Number of mission slot templates to skip before retrieving new ones from database, defaults to 0 (used for pagination in combination with limit)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1Missionslottemplates(authorization?: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<GetMissionSlotTemplateListResponse>;
    public getV1Missionslottemplates(authorization?: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetMissionSlotTemplateListResponse>>;
    public getV1Missionslottemplates(authorization?: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetMissionSlotTemplateListResponse>>;
    public getV1Missionslottemplates(authorization?: string, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetMissionSlotTemplateListResponse>(`${this.basePath}/v1/missionSlotTemplates`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns details of a mission slot template
     * Returns details of a mission slot template, including a full slot group and slot list. No authentication is required to access this endpoint
     * @param slotTemplateUid UID of the mission slot template
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, optional
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV1MissionslottemplatesSlottemplateuid(slotTemplateUid: string, authorization?: string, observe?: 'body', reportProgress?: boolean): Observable<GetMissionSlotTemplateDetailsResponse>;
    public getV1MissionslottemplatesSlottemplateuid(slotTemplateUid: string, authorization?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetMissionSlotTemplateDetailsResponse>>;
    public getV1MissionslottemplatesSlottemplateuid(slotTemplateUid: string, authorization?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetMissionSlotTemplateDetailsResponse>>;
    public getV1MissionslottemplatesSlottemplateuid(slotTemplateUid: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (slotTemplateUid === null || slotTemplateUid === undefined) {
            throw new Error('Required parameter slotTemplateUid was null or undefined when calling getV1MissionslottemplatesSlottemplateuid.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetMissionSlotTemplateDetailsResponse>(`${this.basePath}/v1/missionSlotTemplates/${encodeURIComponent(String(slotTemplateUid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing mission slot template
     * Updates an existing mission slot template, allowing for the title as well as the visibility to be changed. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param slotTemplateUid UID of the mission slot template to update
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, body?: Model84, observe?: 'body', reportProgress?: boolean): Observable<UpdateMissionSlotTemplateResponse>;
    public patchV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, body?: Model84, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateMissionSlotTemplateResponse>>;
    public patchV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, body?: Model84, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateMissionSlotTemplateResponse>>;
    public patchV1MissionslottemplatesSlottemplateuid(authorization: string, slotTemplateUid: string, body?: Model84, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling patchV1MissionslottemplatesSlottemplateuid.');
        }
        if (slotTemplateUid === null || slotTemplateUid === undefined) {
            throw new Error('Required parameter slotTemplateUid was null or undefined when calling patchV1MissionslottemplatesSlottemplateuid.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<UpdateMissionSlotTemplateResponse>(`${this.basePath}/v1/missionSlotTemplates/${encodeURIComponent(String(slotTemplateUid))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new mission slot template with the provided data
     * Creates a new mission slot template with the provided data, optionally already creating slot groups and slots. Regular user authentication is required to access this endpoint
     * @param authorization &#x60;JWT &lt;TOKEN&gt;&#x60; used for authorization, required
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV1Missionslottemplates(authorization: string, body?: Model40, observe?: 'body', reportProgress?: boolean): Observable<CreateMissionSlotTemplateResponse>;
    public postV1Missionslottemplates(authorization: string, body?: Model40, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateMissionSlotTemplateResponse>>;
    public postV1Missionslottemplates(authorization: string, body?: Model40, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateMissionSlotTemplateResponse>>;
    public postV1Missionslottemplates(authorization: string, body?: Model40, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling postV1Missionslottemplates.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CreateMissionSlotTemplateResponse>(`${this.basePath}/v1/missionSlotTemplates`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
