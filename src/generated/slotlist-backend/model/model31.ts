/**
 * slotlist.info API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta32
 * Contact: nick@slotlist.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Model28 } from './model28';
import { Model29 } from './model29';
import { Model30 } from './model30';


/**
 * Public mission slot information, as displayed in slotlists
 */
export interface Model31 {
    /**
     * UID of the slot
     */
    uid: string;
    /**
     * UID of the slot's slot group
     */
    slotGroupUid: string;
    /**
     * Title of the slot
     */
    title: string;
    /**
     * Order number for sorting slotlist
     */
    orderNumber: number;
    /**
     * Difficulity of the slot, ranging from 0 (easiest) to 4 (hardest)
     */
    difficulty: number;
    /**
     * Detailed, optional description of the mission slot, further explaining the responsibilities and the selected role
     */
    detailedDescription?: string;
    /**
     * Optional short description of the slot
     */
    description?: string;
    /**
     * Indicates whether the slot is a reserve slot (true, will only be assigned if all other slots have been filled) or a regular one (false)
     */
    reserve: boolean;
    /**
     * Indicates whether the slot is a blocked slot (true, no users can register) or a regular one (false). Blocked slots can be used by mission creators to manually \"assign\" slots to community or users that choose not to use slotlist.info
     */
    blocked: boolean;
    /**
     * Indicates whether the slot is auto-assignable. Auto-assignable slots do not require confirmation by a mission editor, but are automatically assigned to the first registering user (who would have thought, what a good name choice!)
     */
    autoAssignable: boolean;
    restrictedCommunity?: Model28;
    requiredDLCs: Model29;
    assignee?: Model30;
    /**
     * Nickname of external player assigned to the slot. Allows for slots to be assigned to users not present in the database. Cannot be set at the same time as an `assigneeUid` and vice versa. Can be `null` if no external player has been assigned
     */
    externalAssignee?: string;
    /**
     * Optional UID of the mission slot registration that the user retrieving the mission slotlist has performed for the current slot. Omitted for unauthenticated users or slots the user didn' register for
     */
    registrationUid?: string;
    /**
     * Number of registrations currently submitted for this slot
     */
    registrationCount: number;
}
