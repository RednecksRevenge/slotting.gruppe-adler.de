/**
 * slotlist.info API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-beta32
 * Contact: nick@slotlist.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Model95 } from './model95';


export interface Model96 {
    /**
     * New title of the slot
     */
    title?: string;
    /**
     * New difficulity of the slot, ranging from 0 (easiest) to 4 (hardest)
     */
    difficulty?: number;
    /**
     * New optional short description of the slot
     */
    description?: string;
    /**
     * New detailed, optional description of the mission slot, further explaining the responsibilities and the selected role
     */
    detailedDescription?: string;
    /**
     * New UID of the community the slot is restricted to. Setting this to `null` removes the restriction and opens the slot to everyone
     */
    restrictedCommunityUid?: string;
    /**
     * New indicator whether the slot is a reserve slot (true, will only be assigned if all other slots have been filled) or a regular one (false)
     */
    reserve?: boolean;
    /**
     * New indicator whether the slot is a blocked slot (true, no users can register) or a regular one (false). Blocked slots can be used by mission creators to manually \"assign\" slots to community or users that choose not to use slotlist.info
     */
    blocked?: boolean;
    /**
     * New indicator whether the slot is auto-assignable. Auto-assignable slots do not require confirmation by a mission editor, but are automatically assigned to the first registering user (who would have thought, what a good name choice!)
     */
    autoAssignable?: boolean;
    requiredDLCs?: Model95;
    /**
     * Nickname of external player assigned to the slot. Allows for slots to be assigned to users not present in the database. Cannot be set if a user has been assigned and vice versa. Set to `null` to remove the external assignee
     */
    externalAssignee?: string;
    /**
     * Order number of the slot the slot should be moved after. Allows for reordering of slots - all other order numbers will be adapted accordingly
     */
    moveAfter?: number;
}
